Hierarchical XGBoost
root

#1 Try:
{
    'booster': ['gbtree'],
    'objective': ['multi:softmax'],
    'num_class': [num_class],
    'eval_metric': ['mlogloss'],
    'learning_rate': [0.3, 0.355, 0.4],
    'n_estimators': [100],
    'max_depth': [3, 4, 5],
    'min_child_weight': [2, 3, 4],
    'gamma': [0.001, 0.01, 0.1],
    'subsample': [0.8, 0.9, 1],
    'colsample_bytree': [0.8, 0.9, 1],
    'reg_alpha': [0.00001, 0.00005, 0.0001],
    'seed': [seed],
    'device': ['cuda']
}

{
    'booster': 'gbtree', 
    'colsample_bytree': 1, 
    'device': 'cuda', 
    'eval_metric': 'mlogloss', 
    'gamma': 0.001, 
    'learning_rate': 0.3, 
    'max_depth': 5, 
    'min_child_weight': 3, 
    'n_estimators': 100, 
    'num_class': 7, 
    'objective': 'multi:softmax', 
    'reg_alpha': 1e-05, 
    'seed': 12345, 
    'subsample': 0.8
}




#2 Try:
{
    'booster': ['gbtree'],
    'objective': ['multi:softmax'],
    'num_class': [num_class],
    'eval_metric': ['mlogloss'],
    'learning_rate': [0.25, 0.3, 0.35],
    'n_estimators': [100],
    'max_depth': [5, 6],
    'min_child_weight': [3],
    'gamma': [0.005, 0.01, 0.015],
    'subsample': [0.8, 0.9, 1],
    'colsample_bytree': [1],
    'reg_alpha': [0.00005],
    'seed': [seed],
    'device': ['cuda']
}

{
    'booster': 'gbtree', 
    'colsample_bytree': 1, 
    'device': 'cuda', 
    'eval_metric': 'mlogloss', 
    'gamma': 0.005, 
    'learning_rate': 0.3, 
    'max_depth': 6, 
    'min_child_weight': 3, 
    'n_estimators': 100, 
    'num_class': 7, 
    'objective': 'multi:softmax', 
    'reg_alpha': 5e-05, 
    'seed': 12345, 
    'subsample': 1
}




#3 Try:
{
    'booster': ['gbtree'],
    'objective': ['multi:softmax'],
    'num_class': [num_class],
    'eval_metric': ['mlogloss'],
    'learning_rate': [0.3],
    'n_estimators': [100],
    'max_depth': [6, 7, 8],
    'min_child_weight': [3],
    'gamma': [0.001, 0.002, 0.003, 0.004, 0.0045, 0.005],
    'subsample': [1],
    'colsample_bytree': [1],
    'reg_alpha': [0.00005],
    'seed': [seed],
    'device': ['cuda']
}

{
    'booster': 'gbtree', 
    'colsample_bytree': 1, 
    'device': 'cuda', 
    'eval_metric': 'mlogloss', 
    'gamma': 0.001, 
    'learning_rate': 0.3, 
    'max_depth': 8, 
    'min_child_weight': 3, 
    'n_estimators': 100, 
    'num_class': 7, 
    'objective': 'multi:softmax', 
    'reg_alpha': 5e-05, 
    'seed': 12345, 
    'subsample': 1
}




#4 Try:
{
    'booster': ['gbtree'],
    'objective': ['multi:softmax'],
    'num_class': [num_class],
    'eval_metric': ['mlogloss'],
    'learning_rate': [0.3],
    'n_estimators': [100],
    'max_depth': [8, 9, 10],
    'min_child_weight': [3],
    'gamma': [0.0001, 0.00015, 0.001, 0.0015],
    'subsample': [1],
    'colsample_bytree': [1],
    'reg_alpha': [0.00005],
    'seed': [seed],
    'device': ['cuda']
}

{
    'booster': 'gbtree', 
    'colsample_bytree': 1, 
    'device': 'cuda', 
    'eval_metric': 'mlogloss', 
    'gamma': 0.001, 
    'learning_rate': 0.3, 
    'max_depth': 8, 
    'min_child_weight': 3, 
    'n_estimators': 100, 
    'num_class': 7, 
    'objective': 'multi:softmax', 
    'reg_alpha': 5e-05, 
    'seed': 12345, 
    'subsample': 1
}




FINAL:
{
    'booster': 'gbtree', 
    'colsample_bytree': 1, 
    'device': 'cuda', 
    'eval_metric': 'mlogloss', 
    'gamma': 0.001, 
    'learning_rate': 0.3, 
    'max_depth': 8, 
    'min_child_weight': 3, 
    'n_estimators': 100, 
    'num_class': 7, 
    'objective': 'multi:softmax', 
    'reg_alpha': 5e-05, 
    'seed': 12345, 
    'subsample': 1
}